package analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import analizador.ast.*;
import analizador.ast.entorno.*;
import analizador.ast.expresion.*;
import analizador.ast.expresion.operacion.*;
import analizador.ast.instruccion.*;
import analizador.ast.instruccion.condicionales.*;
import analizador.ast.instruccion.ciclos.*;

parser code
{:
	private Ast ast;
	
	public Ast getAST(){
		return ast;
	}
	
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador " +s.value + " no reconocido." );
		//AnalizadorError tmp = new AnalizadorError();
		//tmp.setColumna(s.right+1);
		//tmp.setLinea(s.left+1);
		//tmp.setValor(s.value+"");
		//tmp.setError("Sint√°ctico");
        
		//error.add(tmp);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico Fatal en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " + s.value + " no reconocido.");
		//report_fatal_error("Error sintactico: <"+s.value+">", cur_token);
	}
:}

action code
{:

:}

terminal String tstring, tchar, entero, decimal, id, null_, true_, false_;
terminal llaveIzquierda, llaveDerecha, parIzquierda, parDerecha, corcheteIzquierda, corcheteDerecha, puntoycoma, coma, punto;
terminal dospuntos, interrogacion;
terminal mas, menos, asterisco, diagonal, modulo, umenos, umas, masmas, menosmenos, umasmas, umenosmenos;
terminal mayorque, menorque, mayorigual, menorigual, igualigual, diferente;
terminal and, or, not, xor;
terminal igual, masigual, menosigual, porigual, diagonaligual;
terminal int_, double_, char_, boolean_, string_;
terminal print_, printTabla_, if_, else_, break_, while_, do_, new_;

non terminal INICIO;
non terminal ArrayList<NodoAst> SENTENCIAS;
non terminal NodoAst SENTENCIA; 
non terminal Expresion UNARIO;
non terminal Tipo TIPO;
non terminal Declaracion DECLARACION;
non terminal ArrayList<Asignacion> DECLARACION_LISTA;
non terminal Asignacion DECLA_ASIGNA;
non terminal Identificador DECLARACION_ID;
non terminal Asignacion ASIGNACION;
non terminal If IF;
non terminal SubIf ELSE;
non terminal ArrayList<SubIf> ELSEIF;
non terminal ArrayList<NodoAst> BLOQUES_L;
non terminal ArrayList<NodoAst> BLOQUES;
non terminal NodoAst BLOQUE;
non terminal While WHILE;
non terminal DoWhile DO_WHILE;
non terminal Expresion VALOR;
non terminal ArrayList<Expresion> DIMENSION; 
non terminal ArrayList<Expresion> ARREGLO;
non terminal Expresion E;

precedence left interrogacion;
precedence left or;
precedence left and;
precedence left xor;
precedence right not;
precedence left igualigual;
precedence left diferente;
precedence left mayorque, menorque, mayorigual, menorigual;
precedence left mas, menos;
precedence left asterisco, diagonal, modulo;
precedence right masmas, menosmenos;
precedence right umasmas, umenosmenos;
precedence right umenos, umas;

start with INICIO;

INICIO ::= SENTENCIAS:s
        {: 
            parser.ast = new Ast(s);
            System.out.println("COMPILADOR OK"); 
        :};

SENTENCIAS ::= SENTENCIAS:a SENTENCIA:b {: RESULT = a; RESULT.add(b); :}
            | SENTENCIA:a {: RESULT = new ArrayList<>(); RESULT.add(a); :};

SENTENCIA ::= print_ parIzquierda E:e parDerecha puntoycoma {: RESULT = new Print(e, eleft, eright); :}
            | printTabla_:a parIzquierda parDerecha puntoycoma {: RESULT = new PrintTabla(aleft, aright); :}
            | UNARIO:a puntoycoma {: RESULT = a; :}
            | DECLARACION:a puntoycoma {: RESULT = a; :}
            | ASIGNACION:a puntoycoma {: RESULT = a; :}
            | IF:a {: RESULT = a; :}
            | WHILE:a {: RESULT = a; :}
            | DO_WHILE:a puntoycoma {: RESULT = a; :};

UNARIO ::=  id:a masmas:x {: RESULT = new PostFijo(new Identificador(a, aleft, aright), Operacion.Operador.AUMENTO, xleft+1, xright+1); :}
           | id:a menosmenos:x {: RESULT = new PostFijo(new Identificador(a, aleft, aright), Operacion.Operador.DECREMENTO, xleft+1, xright+1); :}
           | masmas:x id:a {: RESULT = new PreFijo(new Identificador(a, aleft, aright), Operacion.Operador.AUMENTO, xleft+1, xright+1); :} 
           | menosmenos:x id:a {: RESULT = new PreFijo(new Identificador(a, aleft, aright), Operacion.Operador.DECREMENTO, xleft+1, xright+1); :};

DECLARACION ::= TIPO:a DECLARACION_LISTA:b {: RESULT = new Declaracion(a, b, aleft, aright); :};

DECLARACION_LISTA ::= DECLARACION_LISTA:a coma DECLA_ASIGNA:b {: RESULT = a; RESULT.add(b);  :}
                    | DECLA_ASIGNA:a {: RESULT = new ArrayList<>(); RESULT.add(a); :};

DECLA_ASIGNA ::= DECLARACION_ID:a igual:x VALOR:b {: RESULT = new Asignacion(a, b, xleft, xright+1); :}
                |DECLARACION_ID:a {: RESULT = new Asignacion(a, aleft, aright); :};

DECLARACION_ID ::= DECLARACION_ID:a corcheteIzquierda corcheteDerecha {:RESULT = a; RESULT.addDimension(); :}
                | id:a {: RESULT = new Identificador(a, aleft, aright); :};

ASIGNACION ::= id:a igual VALOR:b {: RESULT = new Asignacion(new Identificador(a, aleft, aright), b, aleft, aright); :};

TIPO ::= int_ {: RESULT = Tipo.INT; :}
        |double_ {: RESULT = Tipo.DOUBLE; :}
        |string_ {: RESULT = Tipo.STRING; :}
        |char_ {: RESULT = Tipo.CHAR; :}
        |boolean_ {: RESULT = Tipo.BOOLEAN; :};

IF ::= if_:x parIzquierda E:a parDerecha llaveIzquierda BLOQUES_L:b llaveDerecha {: RESULT = new If(a, b, xleft, xright); :}
     |if_:x parIzquierda E:a parDerecha llaveIzquierda BLOQUES_L:b llaveDerecha ELSE:c {: RESULT = new If(a, b, xleft, xright, c); :}
     |if_:x parIzquierda E:a parDerecha llaveIzquierda BLOQUES_L:b llaveDerecha ELSEIF:c {: RESULT = new If(a, b, xleft, xright, c); :}
     |if_:x parIzquierda E:a parDerecha llaveIzquierda BLOQUES_L:b llaveDerecha ELSEIF:c ELSE:d {:RESULT = new If(a, b, xleft, xright, c, d);:};

ELSE ::= else_:x llaveIzquierda BLOQUES_L:a llaveDerecha{: RESULT = new SubIf(a, xleft+1, xright+1); :};

ELSEIF ::= ELSEIF:a else_:x if_ parIzquierda E:b parDerecha llaveIzquierda BLOQUES_L:c llaveDerecha {: RESULT = a; RESULT.add(new SubIf(b, c, xleft, xright)); :} 
        | else_:x if_ parIzquierda E:a parDerecha llaveIzquierda BLOQUES_L:b llaveDerecha {: RESULT = new ArrayList<>(); RESULT.add(new SubIf(a, b, xleft, xright)); :};

WHILE ::= while_:x parIzquierda E:a parDerecha llaveIzquierda BLOQUES_L:b llaveDerecha {: RESULT = new While(a, b, xleft, xright); :};

DO_WHILE ::= do_:x llaveIzquierda BLOQUES_L:a llaveDerecha while_ parIzquierda E:b parDerecha {: RESULT = new DoWhile(a, b, xleft, xright); :};

BLOQUES_L ::= {: RESULT = null; :}
            | BLOQUES:a {: RESULT = a; :};

BLOQUES ::= BLOQUES:a BLOQUE:b {: RESULT = a; RESULT.add(b); :}
            |BLOQUE:a {: RESULT = new ArrayList<>(); RESULT.add(a); :};

BLOQUE ::= print_ parIzquierda E:e parDerecha puntoycoma {: RESULT = new Print(e, eleft, eright); :}
            | printTabla_:a parIzquierda parDerecha puntoycoma {: RESULT = new PrintTabla(aleft, aright); :}
            | UNARIO:a puntoycoma {: RESULT = a; :}
            | DECLARACION:a puntoycoma {: RESULT = a; :}
            | ASIGNACION:a puntoycoma {: RESULT = a; :}
            | IF:a {: RESULT = a; :}
            | break_:a puntoycoma {: RESULT = new Break(aleft, aright); :}
            | WHILE:a {: RESULT = a; :}
            | DO_WHILE:a puntoycoma {: RESULT = a; :};

VALOR ::= E:a {: RESULT = a; :}
           | new_:x TIPO:a DIMENSION:b {: RESULT = new Literal(a, b, xleft, xright); :}
           | llaveIzquierda:x ARREGLO:a llaveDerecha {: RESULT = new Literal(a, xleft, xright);  :};

DIMENSION ::= DIMENSION:a corcheteIzquierda E:b corcheteDerecha {: RESULT = a; RESULT.add(b); :}
                |corcheteIzquierda E:a corcheteDerecha {: RESULT = new ArrayList<>(); RESULT.add(a); :}; 

ARREGLO ::= ARREGLO:a coma VALOR:b {: RESULT = a; RESULT.add(b); :}
        | VALOR:a {: RESULT = new ArrayList<>(); RESULT.add(a); :};

E ::= E:a mas:x E:b {: RESULT = new Aritmetica(a, b, Operacion.Operador.SUMA, xleft, xright); :}
    | E:a menos:x E:b {: RESULT = new Aritmetica(a, b, Operacion.Operador.RESTA, xleft, xright); :}
    | E:a asterisco:x E:b {: RESULT = new Aritmetica(a, b, Operacion.Operador.MULTIPLICACION, xleft, xright); :}
    | E:a diagonal:x E:b {: RESULT = new Aritmetica(a, b, Operacion.Operador.DIVISION, xleft, xright); :}
    | E:a modulo:x E:b {: RESULT = new Aritmetica(a, b, Operacion.Operador.MODULO, xleft, xright); :}
    | menos:x E:a {:RESULT = new Aritmetica(a, new Literal(Tipo.INT, -1, 0,0), Operacion.Operador.MULTIPLICACION, xleft+1, xright+1);:} %prec umenos
    | mas:x E:a {: RESULT = new Aritmetica(a, new Literal(Tipo.INT, 1, 0,0), Operacion.Operador.MULTIPLICACION, xleft+1, xright+1);:} %prec umas

    | E:a masmas:x {: RESULT = new PostFijo(a, Operacion.Operador.AUMENTO, xleft+1, xright+1); :}
    | E:a menosmenos:x {: RESULT = new PostFijo(a, Operacion.Operador.DECREMENTO, xleft+1, xright+1); :}
    | masmas:x E:a {: RESULT = new PreFijo(a, Operacion.Operador.AUMENTO, xleft+1, xright+1); :} %prec umasmas
    | menosmenos:x E:a {: RESULT = new PreFijo(a, Operacion.Operador.DECREMENTO, xleft+1, xright+1); :} %prec umenosmenos

    | E:a mayorque:x E:b {: RESULT = new Relacional(a, b, Operacion.Operador.MAYORQUE, xleft, xright); :}
    | E:a menorque:x E:b {: RESULT = new Relacional(a, b, Operacion.Operador.MENORQUE, xleft, xright); :}
    | E:a mayorigual:x E:b {: RESULT = new Relacional(a, b, Operacion.Operador.MAYORIGUAL, xleft, xright); :}
    | E:a menorigual:x E:b {: RESULT = new Relacional(a, b, Operacion.Operador.MENORIGUAL, xleft, xright); :}
    | E:a igualigual:x E:b {: RESULT = new Relacional(a, b, Operacion.Operador.IGUAL, xleft, xright); :}
    | E:a diferente:x E:b {: RESULT = new Relacional(a, b, Operacion.Operador.DIFERENTE, xleft, xright); :}

    | E:a and:x E:b {: RESULT = new Logica(a, b, Operacion.Operador.AND, xleft, xright); :}
    | E:a or:x E:b {: RESULT = new Logica(a, b, Operacion.Operador.OR, xleft, xright); :}
    | not:x E:b {: RESULT = new Logica(b, Operacion.Operador.NOT, xleft, xright); :}
    | E:a xor:x E:b {: RESULT = new Logica(a, b, Operacion.Operador.XOR, xleft, xright); :}

    | E:a interrogacion:x E:b dospuntos E:c{:RESULT = new Ternario(a, b, c, xleft+1, xright+1);:}

    | parIzquierda E:a parDerecha {: RESULT = a; :}

    | id:a DIMENSION:b {: RESULT = new AccesoArreglo(new Identificador(a, aleft, aright), b, aleft, aright); :}

    | entero:a {: RESULT = new Literal(Tipo.INT, new Integer(a), aleft, aright); :}
    | decimal:a {: RESULT = new Literal(Tipo.DOUBLE, new Double(a), aleft, aright); :}
    | tstring:a {: RESULT = new Literal(Tipo.STRING, a, aleft, aright); :}
    | tchar:a {: RESULT = new Literal(Tipo.CHAR, a.charAt(0), aleft, aright); :}
    | true_:a {: RESULT = new Literal(Tipo.BOOLEAN, new Boolean(true), aleft, aright); :}
    | false_:a {: RESULT = new Literal(Tipo.BOOLEAN, new Boolean(false), aleft, aright); :}
    | id:a {: RESULT = new Identificador(a, aleft, aright); :};

		
		
		