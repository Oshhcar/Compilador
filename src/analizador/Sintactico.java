
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import analizador.ast.*;
import analizador.ast.entorno.*;
import analizador.ast.expresion.*;
import analizador.ast.expresion.operacion.*;
import analizador.ast.instruccion.*;
import analizador.ast.instruccion.condicionales.*;
import analizador.ast.instruccion.ciclos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\006" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\007\004\000\002\010\005\000\002\010\003" +
    "\000\002\011\005\000\002\011\003\000\002\012\005\000" +
    "\002\012\003\000\002\013\005\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\014\011\000\002\014\012\000\002\014\012" +
    "\000\002\014\013\000\002\015\006\000\002\016\013\000" +
    "\002\016\012\000\002\022\011\000\002\023\012\000\002" +
    "\017\002\000\002\017\003\000\002\020\004\000\002\020" +
    "\003\000\002\021\007\000\002\021\006\000\002\021\004" +
    "\000\002\021\004\000\002\021\004\000\002\021\003\000" +
    "\002\021\004\000\002\021\003\000\002\021\004\000\002" +
    "\024\003\000\002\024\005\000\002\024\005\000\002\025" +
    "\006\000\002\025\005\000\002\026\005\000\002\026\003" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\004\000\002" +
    "\027\004\000\002\027\004\000\002\027\004\000\002\027" +
    "\004\000\002\027\004\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\004\000\002\027\005\000\002\027\007\000\002\027" +
    "\005\000\002\027\004\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\034\010\023\036\011\037\006\061\030\062" +
    "\021\063\004\064\026\065\025\066\005\067\031\070\027" +
    "\073\020\074\007\001\002\000\006\010\uffe6\020\uffe6\001" +
    "\002\000\004\016\274\001\002\000\004\010\273\001\002" +
    "\000\004\014\264\001\002\000\036\002\ufff7\010\ufff7\036" +
    "\ufff7\037\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7" +
    "\066\ufff7\067\ufff7\070\ufff7\073\ufff7\074\ufff7\001\002\000" +
    "\004\010\263\001\002\000\004\022\262\001\002\000\036" +
    "\002\ufffe\010\ufffe\036\ufffe\037\ufffe\061\ufffe\062\ufffe\063" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\073\ufffe" +
    "\074\ufffe\001\002\000\036\002\000\010\023\036\011\037" +
    "\006\061\030\062\021\063\004\064\026\065\025\066\005" +
    "\067\031\070\027\073\020\074\007\001\002\000\036\002" +
    "\ufff8\010\ufff8\036\ufff8\037\ufff8\061\ufff8\062\ufff8\063\ufff8" +
    "\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\073\ufff8\074" +
    "\ufff8\001\002\000\004\010\251\001\002\000\004\022\246" +
    "\001\002\000\004\016\240\001\002\000\006\010\uffe8\020" +
    "\uffe8\001\002\000\004\022\237\001\002\000\010\036\221" +
    "\037\223\054\222\001\002\000\004\022\220\001\002\000" +
    "\006\010\uffe7\020\uffe7\001\002\000\006\010\uffe5\020\uffe5" +
    "\001\002\000\004\016\037\001\002\000\006\010\uffe9\020" +
    "\uffe9\001\002\000\004\016\034\001\002\000\004\002\033" +
    "\001\002\000\004\002\001\001\002\000\004\017\035\001" +
    "\002\000\004\022\036\001\002\000\036\002\ufffc\010\ufffc" +
    "\036\ufffc\037\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065" +
    "\ufffc\066\ufffc\067\ufffc\070\ufffc\073\ufffc\074\ufffc\001\002" +
    "\000\034\004\045\005\055\006\050\007\043\010\040\012" +
    "\042\013\044\016\051\027\052\030\046\036\053\037\047" +
    "\052\041\001\002\000\062\015\uffa9\017\uffa9\020\212\021" +
    "\uffa9\022\uffa9\023\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\036\uffa9\037\uffa9\042\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9" +
    "\053\uffa9\001\002\000\034\004\045\005\055\006\050\007" +
    "\043\010\040\012\042\013\044\016\051\027\052\030\046" +
    "\036\053\037\047\052\041\001\002\000\060\015\uffab\017" +
    "\uffab\021\uffab\022\uffab\023\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\uffab\033\uffab\036\uffab\037\uffab\042" +
    "\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab" +
    "\051\uffab\053\uffab\001\002\000\060\015\uffae\017\uffae\021" +
    "\uffae\022\uffae\023\uffae\025\uffae\026\uffae\027\uffae\030\uffae" +
    "\031\uffae\032\uffae\033\uffae\036\uffae\037\uffae\042\uffae\043" +
    "\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae" +
    "\053\uffae\001\002\000\060\015\uffaa\017\uffaa\021\uffaa\022" +
    "\uffaa\023\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa" +
    "\032\uffaa\033\uffaa\036\uffaa\037\uffaa\042\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\053\uffaa" +
    "\001\002\000\060\015\uffad\017\uffad\021\uffad\022\uffad\023" +
    "\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad" +
    "\033\uffad\036\uffad\037\uffad\042\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\051\uffad\053\uffad\001\002" +
    "\000\034\004\045\005\055\006\050\007\043\010\040\012" +
    "\042\013\044\016\051\027\052\030\046\036\053\037\047" +
    "\052\041\001\002\000\034\004\045\005\055\006\050\007" +
    "\043\010\040\012\042\013\044\016\051\027\052\030\046" +
    "\036\053\037\047\052\041\001\002\000\060\015\uffaf\017" +
    "\uffaf\021\uffaf\022\uffaf\023\uffaf\025\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\033\uffaf\036\uffaf\037\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf" +
    "\051\uffaf\053\uffaf\001\002\000\034\004\045\005\055\006" +
    "\050\007\043\010\040\012\042\013\044\016\051\027\052" +
    "\030\046\036\053\037\047\052\041\001\002\000\034\004" +
    "\045\005\055\006\050\007\043\010\040\012\042\013\044" +
    "\016\051\027\052\030\046\036\053\037\047\052\041\001" +
    "\002\000\034\004\045\005\055\006\050\007\043\010\040" +
    "\012\042\013\044\016\051\027\052\030\046\036\053\037" +
    "\047\052\041\001\002\000\046\017\070\026\072\027\073" +
    "\030\062\031\071\032\065\033\074\036\060\037\057\042" +
    "\066\043\064\044\063\045\056\046\076\047\075\050\077" +
    "\051\061\053\067\001\002\000\060\015\uffac\017\uffac\021" +
    "\uffac\022\uffac\023\uffac\025\uffac\026\uffac\027\uffac\030\uffac" +
    "\031\uffac\032\uffac\033\uffac\036\uffac\037\uffac\042\uffac\043" +
    "\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac" +
    "\053\uffac\001\002\000\034\004\045\005\055\006\050\007" +
    "\043\010\040\012\042\013\044\016\051\027\052\030\046" +
    "\036\053\037\047\052\041\001\002\000\060\015\uffbf\017" +
    "\uffbf\021\uffbf\022\uffbf\023\uffbf\025\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\033\uffbf\036\uffbf\037\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf" +
    "\051\uffbf\053\uffbf\001\002\000\060\015\uffc0\017\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\036\uffc0\037\uffc0\042\uffc0\043" +
    "\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0" +
    "\053\uffc0\001\002\000\034\004\045\005\055\006\050\007" +
    "\043\010\040\012\042\013\044\016\051\027\052\030\046" +
    "\036\053\037\047\052\041\001\002\000\034\004\045\005" +
    "\055\006\050\007\043\010\040\012\042\013\044\016\051" +
    "\027\052\030\046\036\053\037\047\052\041\001\002\000" +
    "\034\004\045\005\055\006\050\007\043\010\040\012\042" +
    "\013\044\016\051\027\052\030\046\036\053\037\047\052" +
    "\041\001\002\000\034\004\045\005\055\006\050\007\043" +
    "\010\040\012\042\013\044\016\051\027\052\030\046\036" +
    "\053\037\047\052\041\001\002\000\034\004\045\005\055" +
    "\006\050\007\043\010\040\012\042\013\044\016\051\027" +
    "\052\030\046\036\053\037\047\052\041\001\002\000\034" +
    "\004\045\005\055\006\050\007\043\010\040\012\042\013" +
    "\044\016\051\027\052\030\046\036\053\037\047\052\041" +
    "\001\002\000\034\004\045\005\055\006\050\007\043\010" +
    "\040\012\042\013\044\016\051\027\052\030\046\036\053" +
    "\037\047\052\041\001\002\000\004\014\111\001\002\000" +
    "\034\004\045\005\055\006\050\007\043\010\040\012\042" +
    "\013\044\016\051\027\052\030\046\036\053\037\047\052" +
    "\041\001\002\000\034\004\045\005\055\006\050\007\043" +
    "\010\040\012\042\013\044\016\051\027\052\030\046\036" +
    "\053\037\047\052\041\001\002\000\034\004\045\005\055" +
    "\006\050\007\043\010\040\012\042\013\044\016\051\027" +
    "\052\030\046\036\053\037\047\052\041\001\002\000\034" +
    "\004\045\005\055\006\050\007\043\010\040\012\042\013" +
    "\044\016\051\027\052\030\046\036\053\037\047\052\041" +
    "\001\002\000\034\004\045\005\055\006\050\007\043\010" +
    "\040\012\042\013\044\016\051\027\052\030\046\036\053" +
    "\037\047\052\041\001\002\000\034\004\045\005\055\006" +
    "\050\007\043\010\040\012\042\013\044\016\051\027\052" +
    "\030\046\036\053\037\047\052\041\001\002\000\034\004" +
    "\045\005\055\006\050\007\043\010\040\012\042\013\044" +
    "\016\051\027\052\030\046\036\053\037\047\052\041\001" +
    "\002\000\060\015\uffb6\017\uffb6\021\uffb6\022\uffb6\023\uffb6" +
    "\025\uffb6\026\uffb6\027\073\030\062\031\071\032\065\033" +
    "\074\036\060\037\057\042\066\043\064\044\063\045\056" +
    "\046\076\047\075\050\uffb6\051\uffb6\053\067\001\002\000" +
    "\060\015\uffb8\017\uffb8\021\uffb8\022\uffb8\023\uffb8\025\uffb8" +
    "\026\uffb8\027\073\030\062\031\071\032\065\033\074\036" +
    "\060\037\057\042\066\043\064\044\063\045\056\046\uffb8" +
    "\047\075\050\uffb8\051\uffb8\053\uffb8\001\002\000\060\015" +
    "\uffb7\017\uffb7\021\uffb7\022\uffb7\023\uffb7\025\uffb7\026\uffb7" +
    "\027\073\030\062\031\071\032\065\033\074\036\060\037" +
    "\057\042\066\043\064\044\063\045\056\046\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\053\uffb7\001\002\000\060\015\uffc3\017" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\025\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\036\060\037\057\042" +
    "\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3" +
    "\051\uffc3\053\uffc3\001\002\000\060\015\uffc7\017\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\031\071\032\065\033\074\036\060\037\057\042\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\053\uffc7\001\002\000\046\025\106\026\072\027\073\030" +
    "\062\031\071\032\065\033\074\036\060\037\057\042\066" +
    "\043\064\044\063\045\056\046\076\047\075\050\077\051" +
    "\061\053\067\001\002\000\034\004\045\005\055\006\050" +
    "\007\043\010\040\012\042\013\044\016\051\027\052\030" +
    "\046\036\053\037\047\052\041\001\002\000\060\015\uffb2" +
    "\017\uffb2\021\uffb2\022\uffb2\023\uffb2\025\uffb2\026\072\027" +
    "\073\030\062\031\071\032\065\033\074\036\060\037\057" +
    "\042\066\043\064\044\063\045\056\046\076\047\075\050" +
    "\077\051\061\053\067\001\002\000\060\015\uffc5\017\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\033\uffc5\036\060\037\057\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\053\uffc5\001\002\000\040\010\023\015\uffdb\036\011" +
    "\037\006\061\030\062\021\063\004\064\026\065\025\066" +
    "\112\067\125\070\027\072\117\073\020\074\007\001\002" +
    "\000\004\016\166\001\002\000\040\010\uffd0\015\uffd0\036" +
    "\uffd0\037\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0" +
    "\066\uffd0\067\uffd0\070\uffd0\072\uffd0\073\uffd0\074\uffd0\001" +
    "\002\000\004\022\165\001\002\000\040\010\uffd2\015\uffd2" +
    "\036\uffd2\037\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065" +
    "\uffd2\066\uffd2\067\uffd2\070\uffd2\072\uffd2\073\uffd2\074\uffd2" +
    "\001\002\000\040\010\uffd8\015\uffd8\036\uffd8\037\uffd8\061" +
    "\uffd8\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8" +
    "\070\uffd8\072\uffd8\073\uffd8\074\uffd8\001\002\000\004\022" +
    "\164\001\002\000\004\022\163\001\002\000\004\022\162" +
    "\001\002\000\004\022\161\001\002\000\004\015\132\001" +
    "\002\000\040\010\023\015\uffda\036\011\037\006\061\030" +
    "\062\021\063\004\064\026\065\025\066\112\067\125\070" +
    "\027\072\117\073\020\074\007\001\002\000\004\016\126" +
    "\001\002\000\004\017\127\001\002\000\004\022\130\001" +
    "\002\000\040\010\uffd6\015\uffd6\036\uffd6\037\uffd6\061\uffd6" +
    "\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\070" +
    "\uffd6\072\uffd6\073\uffd6\074\uffd6\001\002\000\040\010\uffd9" +
    "\015\uffd9\036\uffd9\037\uffd9\061\uffd9\062\uffd9\063\uffd9\064" +
    "\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\072\uffd9\073\uffd9" +
    "\074\uffd9\001\002\000\044\002\uffe4\010\uffe4\015\uffe4\036" +
    "\uffe4\037\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\067\uffe4\070\uffe4\071\135\072\uffe4\073\uffe4\074" +
    "\uffe4\001\002\000\042\002\uffe3\010\uffe3\015\uffe3\036\uffe3" +
    "\037\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066" +
    "\uffe3\067\uffe3\070\uffe3\072\uffe3\073\uffe3\074\uffe3\001\002" +
    "\000\044\002\uffe2\010\uffe2\015\uffe2\036\uffe2\037\uffe2\061" +
    "\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2" +
    "\070\uffe2\071\151\072\uffe2\073\uffe2\074\uffe2\001\002\000" +
    "\006\014\136\070\137\001\002\000\040\010\023\015\uffdb" +
    "\036\011\037\006\061\030\062\021\063\004\064\026\065" +
    "\025\066\112\067\125\070\027\072\117\073\020\074\007" +
    "\001\002\000\004\016\140\001\002\000\034\004\045\005" +
    "\055\006\050\007\043\010\040\012\042\013\044\016\051" +
    "\027\052\030\046\036\053\037\047\052\041\001\002\000" +
    "\046\017\142\026\072\027\073\030\062\031\071\032\065" +
    "\033\074\036\060\037\057\042\066\043\064\044\063\045" +
    "\056\046\076\047\075\050\077\051\061\053\067\001\002" +
    "\000\004\014\143\001\002\000\040\010\023\015\uffdb\036" +
    "\011\037\006\061\030\062\021\063\004\064\026\065\025" +
    "\066\112\067\125\070\027\072\117\073\020\074\007\001" +
    "\002\000\004\015\145\001\002\000\044\002\uffde\010\uffde" +
    "\015\uffde\036\uffde\037\uffde\061\uffde\062\uffde\063\uffde\064" +
    "\uffde\065\uffde\066\uffde\067\uffde\070\uffde\071\uffde\072\uffde" +
    "\073\uffde\074\uffde\001\002\000\004\015\147\001\002\000" +
    "\042\002\uffe0\010\uffe0\015\uffe0\036\uffe0\037\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070" +
    "\uffe0\072\uffe0\073\uffe0\074\uffe0\001\002\000\042\002\uffe1" +
    "\010\uffe1\015\uffe1\036\uffe1\037\uffe1\061\uffe1\062\uffe1\063" +
    "\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1\072\uffe1" +
    "\073\uffe1\074\uffe1\001\002\000\006\014\136\070\152\001" +
    "\002\000\004\016\153\001\002\000\034\004\045\005\055" +
    "\006\050\007\043\010\040\012\042\013\044\016\051\027" +
    "\052\030\046\036\053\037\047\052\041\001\002\000\046" +
    "\017\155\026\072\027\073\030\062\031\071\032\065\033" +
    "\074\036\060\037\057\042\066\043\064\044\063\045\056" +
    "\046\076\047\075\050\077\051\061\053\067\001\002\000" +
    "\004\014\156\001\002\000\040\010\023\015\uffdb\036\011" +
    "\037\006\061\030\062\021\063\004\064\026\065\025\066" +
    "\112\067\125\070\027\072\117\073\020\074\007\001\002" +
    "\000\004\015\160\001\002\000\044\002\uffdf\010\uffdf\015" +
    "\uffdf\036\uffdf\037\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf" +
    "\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf\072\uffdf\073" +
    "\uffdf\074\uffdf\001\002\000\040\010\uffd5\015\uffd5\036\uffd5" +
    "\037\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066" +
    "\uffd5\067\uffd5\070\uffd5\072\uffd5\073\uffd5\074\uffd5\001\002" +
    "\000\040\010\uffcf\015\uffcf\036\uffcf\037\uffcf\061\uffcf\062" +
    "\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf" +
    "\072\uffcf\073\uffcf\074\uffcf\001\002\000\040\010\uffd3\015" +
    "\uffd3\036\uffd3\037\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3" +
    "\065\uffd3\066\uffd3\067\uffd3\070\uffd3\072\uffd3\073\uffd3\074" +
    "\uffd3\001\002\000\040\010\uffd1\015\uffd1\036\uffd1\037\uffd1" +
    "\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067" +
    "\uffd1\070\uffd1\072\uffd1\073\uffd1\074\uffd1\001\002\000\040" +
    "\010\uffd4\015\uffd4\036\uffd4\037\uffd4\061\uffd4\062\uffd4\063" +
    "\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\072\uffd4" +
    "\073\uffd4\074\uffd4\001\002\000\034\004\045\005\055\006" +
    "\050\007\043\010\040\012\042\013\044\016\051\027\052" +
    "\030\046\036\053\037\047\052\041\001\002\000\046\017" +
    "\170\026\072\027\073\030\062\031\071\032\065\033\074" +
    "\036\060\037\057\042\066\043\064\044\063\045\056\046" +
    "\076\047\075\050\077\051\061\053\067\001\002\000\004" +
    "\022\171\001\002\000\040\010\uffd7\015\uffd7\036\uffd7\037" +
    "\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7" +
    "\067\uffd7\070\uffd7\072\uffd7\073\uffd7\074\uffd7\001\002\000" +
    "\060\015\uffb3\017\uffb3\021\uffb3\022\uffb3\023\uffb3\025\uffb3" +
    "\026\uffb3\027\073\030\062\031\071\032\065\033\074\036" +
    "\060\037\057\042\066\043\064\044\063\045\056\046\076" +
    "\047\075\050\uffb3\051\uffb3\053\uffb3\001\002\000\060\015" +
    "\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc\025\uffbc\026\uffbc" +
    "\027\073\030\062\031\071\032\065\033\074\036\060\037" +
    "\057\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\053\uffbc\001\002\000\060\015\uffc4\017" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\036\060\037\057\042" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\053\uffc4\001\002\000\060\015\uffbb\017\uffbb\021" +
    "\uffbb\022\uffbb\023\uffbb\025\uffbb\026\uffbb\027\073\030\062" +
    "\031\071\032\065\033\074\036\060\037\057\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb" +
    "\053\uffbb\001\002\000\060\015\uffba\017\uffba\021\uffba\022" +
    "\uffba\023\uffba\025\uffba\026\uffba\027\073\030\062\031\071" +
    "\032\065\033\074\036\060\037\057\042\uffba\043\uffba\044" +
    "\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\053\uffba" +
    "\001\002\000\060\015\uffc6\017\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\071\032\065" +
    "\033\074\036\060\037\057\042\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\053\uffc6\001\002" +
    "\000\060\015\uffb5\017\uffb5\021\uffb5\022\uffb5\023\uffb5\025" +
    "\uffb5\026\uffb5\027\073\030\062\031\071\032\065\033\074" +
    "\036\060\037\057\042\066\043\064\044\063\045\056\046" +
    "\076\047\075\050\077\051\uffb5\053\067\001\002\000\060" +
    "\015\uffb9\017\uffb9\021\uffb9\022\uffb9\023\uffb9\025\uffb9\026" +
    "\uffb9\027\073\030\062\031\071\032\065\033\074\036\060" +
    "\037\057\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\051\uffb9\053\uffb9\001\002\000\060\015\uffbe" +
    "\017\uffbe\021\uffbe\022\uffbe\023\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\036\uffbe\037\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050" +
    "\uffbe\051\uffbe\053\uffbe\001\002\000\060\015\uffc1\017\uffc1" +
    "\021\uffc1\022\uffc1\023\uffc1\025\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\036\uffc1\037\uffc1\042\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\053\uffc1\001\002\000\046\017\205\026\072\027\073" +
    "\030\062\031\071\032\065\033\074\036\060\037\057\042" +
    "\066\043\064\044\063\045\056\046\076\047\075\050\077" +
    "\051\061\053\067\001\002\000\060\015\uffb1\017\uffb1\021" +
    "\uffb1\022\uffb1\023\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\033\uffb1\036\uffb1\037\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1" +
    "\053\uffb1\001\002\000\060\015\uffbd\017\uffbd\021\uffbd\022" +
    "\uffbd\023\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\036\uffbd\037\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\053\uffbd" +
    "\001\002\000\060\015\uffc2\017\uffc2\021\uffc2\022\uffc2\023" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\036\uffc2\037\uffc2\042\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\053\uffc2\001\002" +
    "\000\060\015\uffb4\017\uffb4\021\uffb4\022\uffb4\023\uffb4\025" +
    "\uffb4\026\uffb4\027\073\030\062\031\071\032\065\033\074" +
    "\036\060\037\057\042\066\043\064\044\063\045\056\046" +
    "\076\047\075\050\uffb4\051\uffb4\053\uffb4\001\002\000\062" +
    "\015\uffb0\017\uffb0\020\215\021\uffb0\022\uffb0\023\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\036\uffb0\037\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\047\uffb0\050\uffb0\051\uffb0\053\uffb0\001\002\000\034" +
    "\004\045\005\055\006\050\007\043\010\040\012\042\013" +
    "\044\016\051\027\052\030\046\036\053\037\047\052\041" +
    "\001\002\000\046\021\214\026\072\027\073\030\062\031" +
    "\071\032\065\033\074\036\060\037\057\042\066\043\064" +
    "\044\063\045\056\046\076\047\075\050\077\051\061\053" +
    "\067\001\002\000\062\015\uffca\017\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\036\uffca\037\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\053" +
    "\uffca\001\002\000\034\004\045\005\055\006\050\007\043" +
    "\010\040\012\042\013\044\016\051\027\052\030\046\036" +
    "\053\037\047\052\041\001\002\000\046\021\217\026\072" +
    "\027\073\030\062\031\071\032\065\033\074\036\060\037" +
    "\057\042\066\043\064\044\063\045\056\046\076\047\075" +
    "\050\077\051\061\053\067\001\002\000\062\015\uffcb\017" +
    "\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\036\uffcb\037" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\053\uffcb\001\002\000\036\002\ufffb\010" +
    "\ufffb\036\ufffb\037\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb" +
    "\065\ufffb\066\ufffb\067\ufffb\070\ufffb\073\ufffb\074\ufffb\001" +
    "\002\000\004\022\ufff5\001\002\000\040\004\045\005\055" +
    "\006\050\007\043\010\040\012\042\013\044\014\225\016" +
    "\051\027\052\030\046\036\053\037\047\052\041\075\226" +
    "\001\002\000\004\022\ufff4\001\002\000\004\022\uffea\001" +
    "\002\000\040\004\045\005\055\006\050\007\043\010\040" +
    "\012\042\013\044\014\225\016\051\027\052\030\046\036" +
    "\053\037\047\052\041\075\226\001\002\000\014\061\030" +
    "\062\021\063\004\064\026\065\025\001\002\000\052\015" +
    "\uffce\022\uffce\023\uffce\026\072\027\073\030\062\031\071" +
    "\032\065\033\074\036\060\037\057\042\066\043\064\044" +
    "\063\045\056\046\076\047\075\050\077\051\061\053\067" +
    "\001\002\000\004\020\212\001\002\000\012\015\uffcd\020" +
    "\215\022\uffcd\023\uffcd\001\002\000\006\015\235\023\234" +
    "\001\002\000\006\015\uffc8\023\uffc8\001\002\000\040\004" +
    "\045\005\055\006\050\007\043\010\040\012\042\013\044" +
    "\014\225\016\051\027\052\030\046\036\053\037\047\052" +
    "\041\075\226\001\002\000\010\015\uffcc\022\uffcc\023\uffcc" +
    "\001\002\000\006\015\uffc9\023\uffc9\001\002\000\036\002" +
    "\ufff6\010\ufff6\036\ufff6\037\ufff6\061\ufff6\062\ufff6\063\ufff6" +
    "\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\073\ufff6\074" +
    "\ufff6\001\002\000\034\004\045\005\055\006\050\007\043" +
    "\010\040\012\042\013\044\016\051\027\052\030\046\036" +
    "\053\037\047\052\041\001\002\000\046\017\242\026\072" +
    "\027\073\030\062\031\071\032\065\033\074\036\060\037" +
    "\057\042\066\043\064\044\063\045\056\046\076\047\075" +
    "\050\077\051\061\053\067\001\002\000\004\014\243\001" +
    "\002\000\040\010\023\015\uffdb\036\011\037\006\061\030" +
    "\062\021\063\004\064\026\065\025\066\112\067\125\070" +
    "\027\072\117\073\020\074\007\001\002\000\004\015\245" +
    "\001\002\000\042\002\uffdd\010\uffdd\015\uffdd\036\uffdd\037" +
    "\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd" +
    "\067\uffdd\070\uffdd\072\uffdd\073\uffdd\074\uffdd\001\002\000" +
    "\036\002\ufff9\010\ufff9\036\ufff9\037\ufff9\061\ufff9\062\ufff9" +
    "\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\073" +
    "\ufff9\074\ufff9\001\002\000\006\022\uffef\023\uffef\001\002" +
    "\000\012\020\256\022\uffed\023\uffed\054\255\001\002\000" +
    "\012\020\uffeb\022\uffeb\023\uffeb\054\uffeb\001\002\000\006" +
    "\022\ufff1\023\253\001\002\000\004\010\251\001\002\000" +
    "\006\022\ufff0\023\ufff0\001\002\000\040\004\045\005\055" +
    "\006\050\007\043\010\040\012\042\013\044\014\225\016" +
    "\051\027\052\030\046\036\053\037\047\052\041\075\226" +
    "\001\002\000\004\021\257\001\002\000\012\020\uffec\022" +
    "\uffec\023\uffec\054\uffec\001\002\000\006\022\uffee\023\uffee" +
    "\001\002\000\036\002\uffff\010\uffff\036\uffff\037\uffff\061" +
    "\uffff\062\uffff\063\uffff\064\uffff\065\uffff\066\uffff\067\uffff" +
    "\070\uffff\073\uffff\074\uffff\001\002\000\036\002\ufffa\010" +
    "\ufffa\036\ufffa\037\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa" +
    "\065\ufffa\066\ufffa\067\ufffa\070\ufffa\073\ufffa\074\ufffa\001" +
    "\002\000\004\022\ufff3\001\002\000\040\010\023\015\uffdb" +
    "\036\011\037\006\061\030\062\021\063\004\064\026\065" +
    "\025\066\112\067\125\070\027\072\117\073\020\074\007" +
    "\001\002\000\004\015\266\001\002\000\004\073\267\001" +
    "\002\000\004\016\270\001\002\000\034\004\045\005\055" +
    "\006\050\007\043\010\040\012\042\013\044\016\051\027" +
    "\052\030\046\036\053\037\047\052\041\001\002\000\046" +
    "\017\272\026\072\027\073\030\062\031\071\032\065\033" +
    "\074\036\060\037\057\042\066\043\064\044\063\045\056" +
    "\046\076\047\075\050\077\051\061\053\067\001\002\000" +
    "\004\022\uffdc\001\002\000\004\022\ufff2\001\002\000\034" +
    "\004\045\005\055\006\050\007\043\010\040\012\042\013" +
    "\044\016\051\027\052\030\046\036\053\037\047\052\041" +
    "\001\002\000\046\017\276\026\072\027\073\030\062\031" +
    "\071\032\065\033\074\036\060\037\057\042\066\043\064" +
    "\044\063\045\056\046\076\047\075\050\077\051\061\053" +
    "\067\001\002\000\004\022\277\001\002\000\036\002\ufffd" +
    "\010\ufffd\036\ufffd\037\ufffd\061\ufffd\062\ufffd\063\ufffd\064" +
    "\ufffd\065\ufffd\066\ufffd\067\ufffd\070\ufffd\073\ufffd\074\ufffd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\026\002\031\003\013\004\012\005\023\006" +
    "\015\007\011\013\016\014\014\022\007\023\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\260\005\023\006" +
    "\015\007\011\013\016\014\014\022\007\023\021\001\001" +
    "\000\002\001\001\000\010\010\251\011\246\012\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\053\001\001\000\004\025\210\001\001\000" +
    "\004\027\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\206\001" +
    "\001\000\004\027\205\001\001\000\002\001\001\000\004" +
    "\027\203\001\001\000\004\027\202\001\001\000\004\027" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\177\001\001\000\004\027\176\001\001\000\004" +
    "\027\175\001\001\000\004\027\174\001\001\000\004\027" +
    "\173\001\001\000\004\027\172\001\001\000\004\027\171" +
    "\001\001\000\002\001\001\000\004\027\107\001\001\000" +
    "\004\027\104\001\001\000\004\027\103\001\001\000\004" +
    "\027\102\001\001\000\004\027\101\001\001\000\004\027" +
    "\100\001\001\000\004\027\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\121\006" +
    "\015\007\113\013\117\014\114\017\122\020\123\021\115" +
    "\022\112\023\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\121\006\015" +
    "\007\113\013\117\014\114\021\130\022\112\023\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\132\016" +
    "\133\001\001\000\002\001\001\000\004\015\147\001\001" +
    "\000\002\001\001\000\026\005\121\006\015\007\113\013" +
    "\117\014\114\017\145\020\123\021\115\022\112\023\120" +
    "\001\001\000\002\001\001\000\004\027\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\121\006\015" +
    "\007\113\013\117\014\114\017\143\020\123\021\115\022" +
    "\112\023\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\121\006" +
    "\015\007\113\013\117\014\114\017\156\020\123\021\115" +
    "\022\112\023\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\223" +
    "\027\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\232\026\231\027\226\001\001\000\004\006\227" +
    "\001\001\000\002\001\001\000\004\025\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\235\027\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\005\121\006\015\007" +
    "\113\013\117\014\114\017\243\020\123\021\115\022\112" +
    "\023\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\253\012\247\001" +
    "\001\000\002\001\001\000\006\024\257\027\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\121\006\015\007\113\013\117\014\114\017\264\020" +
    "\123\021\115\022\112\023\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private Ast ast;
	
	public Ast getAST(){
		return ast;
	}
	
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador " +s.value + " no reconocido." );
		//AnalizadorError tmp = new AnalizadorError();
		//tmp.setColumna(s.right+1);
		//tmp.setLinea(s.left+1);
		//tmp.setValor(s.value+"");
		//tmp.setError("Sintáctico");
        
		//error.add(tmp);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Sintactico Fatal en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " + s.value + " no reconocido.");
		//report_fatal_error("Error sintactico: <"+s.value+">", cur_token);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {




  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<NodoAst> s = (ArrayList<NodoAst>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
            parser.ast = new Ast(s);
            System.out.println("COMPILADOR OK"); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              ArrayList<NodoAst> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<NodoAst> a = (ArrayList<NodoAst>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAst b = (NodoAst)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= SENTENCIA 
            {
              ArrayList<NodoAst> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAst a = (NodoAst)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= print_ parIzquierda E parDerecha puntoycoma 
            {
              NodoAst RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Print(e, eleft, eright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= printTabla_ parIzquierda parDerecha puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 RESULT = new PrintTabla(aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= UNARIO puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= DECLARACION puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Declaracion a = (Declaracion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= ASIGNACION puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		If a = (If)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= WHILE 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		While a = (While)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= DO_WHILE puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		DoWhile a = (DoWhile)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // UNARIO ::= id masmas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new PostFijo(new Identificador(a, aleft, aright), Operacion.Operador.AUMENTO, xleft+1, xright+1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // UNARIO ::= id menosmenos 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new PostFijo(new Identificador(a, aleft, aright), Operacion.Operador.DECREMENTO, xleft+1, xright+1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // UNARIO ::= masmas id 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new PreFijo(new Identificador(a, aleft, aright), Operacion.Operador.AUMENTO, xleft+1, xright+1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // UNARIO ::= menosmenos id 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new PreFijo(new Identificador(a, aleft, aright), Operacion.Operador.DECREMENTO, xleft+1, xright+1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= TIPO DECLARACION_LISTA 
            {
              Declaracion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Asignacion> b = (ArrayList<Asignacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Declaracion(a, b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION_LISTA ::= DECLARACION_LISTA coma DECLA_ASIGNA 
            {
              ArrayList<Asignacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Asignacion> a = (ArrayList<Asignacion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Asignacion b = (Asignacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION_LISTA ::= DECLA_ASIGNA 
            {
              ArrayList<Asignacion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_LISTA",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLA_ASIGNA ::= DECLARACION_ID igual VALOR 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Identificador a = (Identificador)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Asignacion(a, b, xleft, xright+1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLA_ASIGNA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLA_ASIGNA ::= DECLARACION_ID 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Identificador a = (Identificador)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Asignacion(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLA_ASIGNA",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_ID ::= DECLARACION_ID corcheteIzquierda corcheteDerecha 
            {
              Identificador RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Identificador a = (Identificador)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = a; RESULT.addDimension(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_ID",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION_ID ::= id 
            {
              Identificador RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Identificador(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_ID",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNACION ::= id igual VALOR 
            {
              Asignacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Asignacion(new Identificador(a, aleft, aright), b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO ::= int_ 
            {
              Tipo RESULT =null;
		 RESULT = Tipo.INT; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO ::= double_ 
            {
              Tipo RESULT =null;
		 RESULT = Tipo.DOUBLE; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO ::= string_ 
            {
              Tipo RESULT =null;
		 RESULT = Tipo.STRING; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO ::= char_ 
            {
              Tipo RESULT =null;
		 RESULT = Tipo.CHAR; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO ::= boolean_ 
            {
              Tipo RESULT =null;
		 RESULT = Tipo.BOOLEAN; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF ::= if_ parIzquierda E parDerecha llaveIzquierda BLOQUES_L llaveDerecha 
            {
              If RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<NodoAst> b = (ArrayList<NodoAst>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new If(a, b, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IF ::= if_ parIzquierda E parDerecha llaveIzquierda BLOQUES_L llaveDerecha ELSE 
            {
              If RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<NodoAst> b = (ArrayList<NodoAst>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		SubIf c = (SubIf)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new If(a, b, xleft, xright, c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IF ::= if_ parIzquierda E parDerecha llaveIzquierda BLOQUES_L llaveDerecha ELSEIF 
            {
              If RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<NodoAst> b = (ArrayList<NodoAst>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<SubIf> c = (ArrayList<SubIf>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new If(a, b, xleft, xright, c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IF ::= if_ parIzquierda E parDerecha llaveIzquierda BLOQUES_L llaveDerecha ELSEIF ELSE 
            {
              If RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		ArrayList<NodoAst> b = (ArrayList<NodoAst>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<SubIf> c = (ArrayList<SubIf>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		SubIf d = (SubIf)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new If(a, b, xleft, xright, c, d);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELSE ::= else_ llaveIzquierda BLOQUES_L llaveDerecha 
            {
              SubIf RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<NodoAst> a = (ArrayList<NodoAst>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new SubIf(a, xleft+1, xright+1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSE",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELSEIF ::= ELSEIF else_ if_ parIzquierda E parDerecha llaveIzquierda BLOQUES_L llaveDerecha 
            {
              ArrayList<SubIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		ArrayList<SubIf> a = (ArrayList<SubIf>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<NodoAst> c = (ArrayList<NodoAst>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; RESULT.add(new SubIf(b, c, xleft, xright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELSEIF ::= else_ if_ parIzquierda E parDerecha llaveIzquierda BLOQUES_L llaveDerecha 
            {
              ArrayList<SubIf> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<NodoAst> b = (ArrayList<NodoAst>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(new SubIf(a, b, xleft, xright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ELSEIF",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // WHILE ::= while_ parIzquierda E parDerecha llaveIzquierda BLOQUES_L llaveDerecha 
            {
              While RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<NodoAst> b = (ArrayList<NodoAst>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new While(a, b, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DO_WHILE ::= do_ llaveIzquierda BLOQUES_L llaveDerecha while_ parIzquierda E parDerecha 
            {
              DoWhile RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		ArrayList<NodoAst> a = (ArrayList<NodoAst>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new DoWhile(a, b, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOQUES_L ::= 
            {
              ArrayList<NodoAst> RESULT =null;
		 RESULT = null; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUES_L",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BLOQUES_L ::= BLOQUES 
            {
              ArrayList<NodoAst> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<NodoAst> a = (ArrayList<NodoAst>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUES_L",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BLOQUES ::= BLOQUES BLOQUE 
            {
              ArrayList<NodoAst> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<NodoAst> a = (ArrayList<NodoAst>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAst b = (NodoAst)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUES",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BLOQUES ::= BLOQUE 
            {
              ArrayList<NodoAst> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoAst a = (NodoAst)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUES",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BLOQUE ::= print_ parIzquierda E parDerecha puntoycoma 
            {
              NodoAst RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Print(e, eleft, eright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BLOQUE ::= printTabla_ parIzquierda parDerecha puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 RESULT = new PrintTabla(aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BLOQUE ::= UNARIO puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOQUE ::= DECLARACION puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Declaracion a = (Declaracion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOQUE ::= ASIGNACION puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOQUE ::= IF 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		If a = (If)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOQUE ::= break_ puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Break(aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOQUE ::= WHILE 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		While a = (While)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOQUE ::= DO_WHILE puntoycoma 
            {
              NodoAst RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		DoWhile a = (DoWhile)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALOR ::= E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALOR ::= new_ TIPO DIMENSION 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(a, b, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VALOR ::= llaveIzquierda ARREGLO llaveDerecha 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Literal(a, xleft, xright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DIMENSION ::= DIMENSION corcheteIzquierda E corcheteDerecha 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DIMENSION ::= corcheteIzquierda E corcheteDerecha 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARREGLO ::= ARREGLO coma VALOR 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARREGLO ::= VALOR 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmetica(a, b, Operacion.Operador.SUMA, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmetica(a, b, Operacion.Operador.RESTA, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= E asterisco E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmetica(a, b, Operacion.Operador.MULTIPLICACION, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= E diagonal E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmetica(a, b, Operacion.Operador.DIVISION, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= E modulo E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmetica(a, b, Operacion.Operador.MODULO, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= menos E 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Aritmetica(a, new Literal(Tipo.INT, -1, 0,0), Operacion.Operador.MULTIPLICACION, xleft+1, xright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= mas E 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Aritmetica(a, new Literal(Tipo.INT, 1, 0,0), Operacion.Operador.MULTIPLICACION, xleft+1, xright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= E masmas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new PostFijo(a, Operacion.Operador.AUMENTO, xleft+1, xright+1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= E menosmenos 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new PostFijo(a, Operacion.Operador.DECREMENTO, xleft+1, xright+1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= masmas E 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new PreFijo(a, Operacion.Operador.AUMENTO, xleft+1, xright+1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= menosmenos E 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new PreFijo(a, Operacion.Operador.DECREMENTO, xleft+1, xright+1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= E mayorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacional(a, b, Operacion.Operador.MAYORQUE, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= E menorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacional(a, b, Operacion.Operador.MENORQUE, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= E mayorigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacional(a, b, Operacion.Operador.MAYORIGUAL, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= E menorigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacional(a, b, Operacion.Operador.MENORIGUAL, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= E igualigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacional(a, b, Operacion.Operador.IGUAL, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= E diferente E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Relacional(a, b, Operacion.Operador.DIFERENTE, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= E and E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logica(a, b, Operacion.Operador.AND, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E or E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logica(a, b, Operacion.Operador.OR, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= not E 
            {
              Expresion RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logica(b, Operacion.Operador.NOT, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= E xor E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Logica(a, b, Operacion.Operador.XOR, xleft, xright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= E interrogacion E dospuntos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Ternario(a, b, c, xleft+1, xright+1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= parIzquierda E parDerecha 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= id DIMENSION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AccesoArreglo(new Identificador(a, aleft, aright), b, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= entero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(Tipo.INT, new Integer(a), aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= decimal 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(Tipo.DOUBLE, new Double(a), aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= tstring 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(Tipo.STRING, a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= tchar 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(Tipo.CHAR, a.charAt(0), aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= true_ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(Tipo.BOOLEAN, new Boolean(true), aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= false_ 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Literal(Tipo.BOOLEAN, new Boolean(false), aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Identificador(a, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
